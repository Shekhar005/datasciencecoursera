find.package("devtools")
installed.packages("devtools")
find.package("devtools")
install.packages("devtools")
fdfkdk
find.package("devtools")
clearPushBack()
library(devtools)
find_rtools()
cllear
dir()
exit
clearPushBack()
exit()
dir()
?ribnom
?rbinom
search()
make.power(2)
square<-make.power(2)
cube
make.power<-function(n){
pow<- function(x){
x^n
}
pow
}
cube<-make.power(3)
square<-make.power(2)
cube
cube(3)
square(2)
square(3)
is(environment(cube))
ls(environment(cube))
get(environment(cube))
get("n",environment(cube))
y<-10
f<-function(x){
y<-2
y^2+g(x)
}
g<-function(x){
x*y
}
y(3)
f(3)
q()
getwd()
?directory
?list.files
?sprintf
filename
pollutantmean <- function(directory, pollutant, id = 1:332) {
## Get a list of filenames
filenames <- list.files(path=directory, pattern="*.csv")
## Initialize a vector to hold values
vals <- vector()
## Loop over the passed id's
for(i in id) {
## Pad the i to create a filename
filename <- sprintf("%03d.csv", i)
filepath <- paste(directory, filename, sep="/")
## Load the data
data <- read.csv(filepath)
## Select our column
d <- data[,pollutant]
## Ignore NAs
d <- d[!is.na(d)]
## append to our vector
vals <- c(vals, d)
}
## Return the value rounded to 3 dec places
round(mean(vals), 3)
}
filename
file.path()
vals
filenames
d
d
?runif
q()
setwd("C:/Users/Admin/Desktop/data science/datasciencecoursera/Programming Assignment 3")
outcome<- read.csv("outcome-of-care-measures.csv", colClasses = "charecter")
outcome<- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
nrow(outcome)
names(outcome)
outcome[,11]<as.numeric(outcome[,11])
hist(outcome)
hist(outcome[,11])
hist(outcome[, 11])
outcome[,11]<-as.numeric(outcome[,11])
hist(outcome[,11])
plot(outcome[,11])
hist(outcome[,11])
best <- function(state,outcome){}
best <- function(state,outcome){ outcomes= c("heart attack","heart failure","pneumonia")}
best <- function(state,outcome){ outcomes= c("heart attack","heart failure","pneumonia") }
outcome
best <- function(state, outcome){
## Validating the outcome string
## Creating a vector the diseases whose outcome we may want
outcomes = c("heart attack", "heart failure", "pneumonia")
if(outcome %in% outcomes == FALSE) stop("invalid outcome")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Filter and simplify the column names
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validating the state string
states <- data[, 2]
states <- unique(states)
if(state %in% states == FALSE) stop("invalid state")
## Take only those rows with have the required state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
source(best.R)
source("best.R")
best("TX","heart attack")
source("rankhospital.R")
source("rankall.R")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
