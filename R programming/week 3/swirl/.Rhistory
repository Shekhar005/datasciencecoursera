find.package("devtools")
installed.packages("devtools")
find.package("devtools")
install.packages("devtools")
fdfkdk
find.package("devtools")
clearPushBack()
library(devtools)
find_rtools()
cllear
dir()
exit
clearPushBack()
exit()
dir()
?ribnom
?rbinom
search()
make.power(2)
square<-make.power(2)
cube
make.power<-function(n){
pow<- function(x){
x^n
}
pow
}
cube<-make.power(3)
square<-make.power(2)
cube
cube(3)
square(2)
square(3)
is(environment(cube))
ls(environment(cube))
get(environment(cube))
get("n",environment(cube))
y<-10
f<-function(x){
y<-2
y^2+g(x)
}
g<-function(x){
x*y
}
y(3)
f(3)
q()
getwd()
?directory
?list.files
?sprintf
filename
pollutantmean <- function(directory, pollutant, id = 1:332) {
## Get a list of filenames
filenames <- list.files(path=directory, pattern="*.csv")
## Initialize a vector to hold values
vals <- vector()
## Loop over the passed id's
for(i in id) {
## Pad the i to create a filename
filename <- sprintf("%03d.csv", i)
filepath <- paste(directory, filename, sep="/")
## Load the data
data <- read.csv(filepath)
## Select our column
d <- data[,pollutant]
## Ignore NAs
d <- d[!is.na(d)]
## append to our vector
vals <- c(vals, d)
}
## Return the value rounded to 3 dec places
round(mean(vals), 3)
}
filename
file.path()
vals
filenames
d
d
?runif
q()
x<-list(matrix(1:4,2,2),matrix(1:6,3,2))
x
attributes(x)
x<-list(a=matrix(1:4,2,2),b=matrix(1:6,3,2))
x
attributes(x)
lapply(x, function(elt){elt[,1]})
?split
setwd("C:/Users/Admin/Desktop/data science/datasciencecoursera/R programming/week 3/swirl")
getwd()
library(swirl)
ls()
swirl()
head(flags)
dim(flags)
class(flags)
play()
?lapply
nxt()
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lappy(flag_colors,sum)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<- flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem){elem[2]})
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vaaply(flags,class,charecter(1))
ok()
vapply(flags, class, character(1))
?taaply
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(iris)
library(datasets)
data("iris")
?iris
Sepal.Length()
mean(Sepal.length)
mean(iris)
iris
virginica_1<- Sepal.Length[,101:150]
virginica_1<- Sepal.Length[,101:150]
virginica_1<- iris[,101:150]
virginica_1<- data.frame(iris,Sepal.Length,101:150)
virginica_1<- data.frame(iris,"Sepal.Length",101:150)
virginica_1
flags
iris_dt <- as.data.table(iris)
iris_dt[Species == "virginica",round(mean(Sepal.Length)) ]
iris_dt <- as.data.table(iris)
iris_dt <-iris
iris_dt[Species == "virginica",round(mean(Sepal.Length)) ]
apply(iris[,1:4],2,mean)
str(iris)
head(iris)
virginica<-subset(iris,Species == 'virginica')
sl<-data.frame(virginica$Sepal.Length)
sl<-data.frame(iris$Sepal.Length[iris$Species=="virginica"])
sl
summary(sl)
virginica
## A pair of functions that cache the inverse of a matrix
## Creates a special matrix object that can cache its inverse
makeCacheMatrix <- function( m = matrix() ) {
## Initialize the inverse property
i <- NULL
## Method to set the matrix
set <- function( matrix ) {
m <<- matrix
i <<- NULL
}
## Method the get the matrix
get <- function() {
## Return the matrix
m
}
## Method to set the inverse of the matrix
setInverse <- function(inverse) {
i <<- inverse
}
## Method to get the inverse of the matrix
getInverse <- function() {
## Return the inverse property
i
}
## Return a list of the methods
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Compute the inverse of the special matrix returned by "makeCacheMatrix"
## above. If the inverse has already been calculated (and the matrix has not
## changed), then the "cachesolve" should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
## Just return the inverse if its already set
if( !is.null(m) ) {
message("getting cached data")
return(m)
}
## Get the matrix from our object
data <- x$get()
## Calculate the inverse using matrix multiplication
m <- solve(data) %*% data
## Set the inverse to the object
x$setInverse(m)
## Return the matrix
m
}
makeCacheMatrix()
